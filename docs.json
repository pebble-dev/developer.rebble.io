[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n images and other objects onto the canvas element. It provides the 2D rendering\n context for the drawing on the device's display.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 50,
                  "offset": 206
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 50,
              "offset": 206
            },
            "indent": [
              1,
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 3,
          "column": 50,
          "offset": 206
        }
      }
    },
    "tags": [
      {
        "title": "namespace",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "name": null
      },
      {
        "title": "description",
        "description": "The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n images and other objects onto the canvas element. It provides the 2D rendering\n context for the drawing on the device's display.",
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 19,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 151,
          "column": 2
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
      "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
    },
    "kind": "namespace",
    "name": "CanvasRendingContext2D",
    "members": {
      "instance": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets all pixels in the rectangle at (x,y) with size (width, height) to\n black, erasing any previously drawn content.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 46,
                        "offset": 116
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 46,
                    "offset": 116
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 46,
                "offset": 116
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Sets all pixels in the rectangle at (x,y) with size (width, height) to\n black, erasing any previously drawn content.",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "The x-axis coordinate of the rectangle's starting point",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y-axis coordinate of the rectangle's starting point",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The rectangle's width",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": "The rectangle's height",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "height"
            }
          ],
          "loc": {
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 37,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 46
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "x",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "y",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "width",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's width",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 22,
                            "offset": 21
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 22,
                        "offset": 21
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 22,
                    "offset": 21
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "height",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's height",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "name": "clearRect",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "clearRect",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.clearRect"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Draws a filled rectangle at (x,y) with size (width, height).",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 61,
                        "offset": 60
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 61,
                    "offset": 60
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 61,
                "offset": 60
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Draws a filled rectangle at (x,y) with size (width, height).",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "The x-axis coordinate of the rectangle's starting point",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y-axis coordinate of the rectangle's starting point",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The rectangle's width",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": "The rectangle's height",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "height"
            }
          ],
          "loc": {
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 44
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "x",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "y",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "width",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's width",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 22,
                            "offset": 21
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 22,
                        "offset": 21
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 22,
                    "offset": 21
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "height",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's height",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "name": "fillRect",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "fillRect",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.fillRect"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Paints a rectangle at (x, y) with size (width, height), using the current\n stroke style.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 15,
                        "offset": 88
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 15,
                    "offset": 88
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 15,
                "offset": 88
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Paints a rectangle at (x, y) with size (width, height), using the current\n stroke style.",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "The x-axis coordinate of the rectangle's starting point",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y-axis coordinate of the rectangle's starting point",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The rectangle's width",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": "The rectangle's height",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "height"
            }
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 47
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "x",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "y",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y-axis coordinate of the rectangle's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 56,
                            "offset": 55
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 56,
                        "offset": 55
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 56,
                    "offset": 55
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "width",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's width",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 22,
                            "offset": 21
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 22,
                        "offset": 21
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 22,
                    "offset": 21
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "height",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The rectangle's height",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            }
          ],
          "name": "strokeRect",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "strokeRect",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.strokeRect"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Draws (fills) text at the given (x,y) position.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 48,
                        "offset": 47
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 48,
                    "offset": 47
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 48,
                "offset": 47
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Draws (fills) text at the given (x,y) position.",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "The text to draw",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "text"
            },
            {
              "title": "param",
              "description": "The x-coordinate of the text's starting point",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y-coordinate of the text's starting point",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The maximum width to draw. If specified, and\n  the string is wider than the width, the font is adjusted to use a smaller\n  font.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "maxWidth"
            }
          ],
          "loc": {
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 75,
                "column": 2
              },
              "end": {
                "line": 75,
                "column": 46
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "text",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The text to draw",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 17,
                            "offset": 16
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 17,
                        "offset": 16
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17,
                    "offset": 16
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            },
            {
              "name": "x",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x-coordinate of the text's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 46,
                            "offset": 45
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 46,
                        "offset": 45
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 46,
                    "offset": 45
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "y",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y-coordinate of the text's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 46,
                            "offset": 45
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 46,
                        "offset": 45
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 46,
                    "offset": 45
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "maxWidth",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The maximum width to draw. If specified, and\n  the string is wider than the width, the font is adjusted to use a smaller\n  font.",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 3,
                            "column": 8,
                            "offset": 128
                          },
                          "indent": [
                            1,
                            1
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 3,
                        "column": 8,
                        "offset": 128
                      },
                      "indent": [
                        1,
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 8,
                    "offset": 128
                  }
                }
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              }
            }
          ],
          "name": "fillText",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "fillText",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.fillText"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Draws (fills) text at the given (x,y) position using the current stroke style.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 79,
                        "offset": 78
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 79,
                    "offset": 78
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 79,
                "offset": 78
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Draws (fills) text at the given (x,y) position using the current stroke style.",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "The text to draw",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "text"
            },
            {
              "title": "param",
              "description": "The x-coordinate of the text's starting point",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y-coordinate of the text's starting point",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The maximum width to draw. If specified, and\n the string is wider than the width, the font is adjusted to use a smaller\n font.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              },
              "name": "maxWidth"
            }
          ],
          "loc": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 89,
                "column": 2
              },
              "end": {
                "line": 89,
                "column": 48
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "text",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The text to draw",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 17,
                            "offset": 16
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 17,
                        "offset": 16
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 17,
                    "offset": 16
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            },
            {
              "name": "x",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x-coordinate of the text's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 46,
                            "offset": 45
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 46,
                        "offset": 45
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 46,
                    "offset": 45
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "y",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y-coordinate of the text's starting point",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 46,
                            "offset": 45
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 46,
                        "offset": 45
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 46,
                    "offset": 45
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Number"
              }
            },
            {
              "name": "maxWidth",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The maximum width to draw. If specified, and\n the string is wider than the width, the font is adjusted to use a smaller\n font.",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 3,
                            "column": 7,
                            "offset": 126
                          },
                          "indent": [
                            1,
                            1
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 3,
                        "column": 7,
                        "offset": 126
                      },
                      "indent": [
                        1,
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 7,
                    "offset": 126
                  }
                }
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Number"
                }
              }
            }
          ],
          "name": "strokeText",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "strokeText",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.strokeText"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns an object containing information about the text.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 57,
                        "offset": 56
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 57,
                    "offset": 56
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 57,
                "offset": 56
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Returns an object containing information about the text.",
              "lineNumber": 1
            },
            {
              "title": "returns",
              "description": "Information about the measured text",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "TextMetrics"
              }
            },
            {
              "title": "param",
              "description": "The text to measure",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "text"
            }
          ],
          "loc": {
            "start": {
              "line": 91,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 99,
                "column": 2
              },
              "end": {
                "line": 99,
                "column": 33
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Information about the measured text",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 36,
                            "offset": 35
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 36,
                        "offset": 35
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 36,
                    "offset": 35
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "TextMetrics"
              }
            }
          ],
          "params": [
            {
              "name": "text",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The text to measure",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 20,
                            "offset": 19
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 20,
                        "offset": 19
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20,
                    "offset": 19
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            }
          ],
          "name": "measureText",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "measureText",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.measureText"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The width of lines drawn (to the nearest integer) with the context (1.0\n by default)",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 13,
                        "offset": 84
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 13,
                    "offset": 84
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 13,
                "offset": 84
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "The width of lines drawn (to the nearest integer) with the context (1.0\n by default)",
              "lineNumber": 1
            }
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 106,
                "column": 2
              },
              "end": {
                "line": 106,
                "column": 11
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "name": "lineWidth",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "lineWidth",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.lineWidth"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Determines how the end points of every line are drawn ('butt' by default).\n There are 3 possible values for this property: 'butt', 'round', 'square'.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 75,
                        "offset": 149
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 75,
                    "offset": 149
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 75,
                "offset": 149
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Determines how the end points of every line are drawn ('butt' by default).\n There are 3 possible values for this property: 'butt', 'round', 'square'.",
              "lineNumber": 1
            }
          ],
          "loc": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 113,
                "column": 1
              },
              "end": {
                "line": 113,
                "column": 8
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "name": "lineCap",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "lineCap",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.lineCap"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Determins how two connecting segments with non-zero lengths in a shape\nare joined together ('miter' by default). There are three possible values\nfor this property: 'miter', 'round', 'bevel'",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 3,
                        "column": 45,
                        "offset": 189
                      },
                      "indent": [
                        1,
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 45,
                    "offset": 189
                  },
                  "indent": [
                    1,
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 3,
                "column": 45,
                "offset": 189
              }
            }
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 120,
                "column": 2
              },
              "end": {
                "line": 120,
                "column": 10
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "name": "lineJoin",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "lineJoin",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.lineJoin"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the miter limit ratio in pixels (10 by default)",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 53,
                        "offset": 52
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 53,
                    "offset": 52
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 53,
                "offset": 52
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Sets the miter limit ratio in pixels (10 by default)",
              "lineNumber": 1
            }
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 1
            },
            "end": {
              "line": 125,
              "column": 4
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 126,
                "column": 2
              },
              "end": {
                "line": 126,
                "column": 12
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "name": "miterLimit",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "miterLimit",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.miterLimit"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Gets the current line dash pattern",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 35,
                        "offset": 34
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 35,
                    "offset": 34
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 35,
                "offset": 34
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Gets the current line dash pattern",
              "lineNumber": 1
            },
            {
              "title": "returns",
              "description": "A list of numbers that specifies the distances to\n alternately draw a line and a gap.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 128,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 135,
                "column": 2
              },
              "end": {
                "line": 135,
                "column": 29
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A list of numbers that specifies the distances to\n alternately draw a line and a gap.",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 2,
                            "column": 36,
                            "offset": 85
                          },
                          "indent": [
                            1
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 36,
                        "offset": 85
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 36,
                    "offset": 85
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "name": "getLineDash",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "getLineDash",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.getLineDash"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the current line dash pattern.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 36,
                        "offset": 35
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 36,
                    "offset": 35
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 36,
                "offset": 35
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Sets the current line dash pattern.",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "A list of numbers that specifies the distances to\nalternatly draw a line and a gap.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "segments"
            }
          ],
          "loc": {
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 144,
                "column": 2
              },
              "end": {
                "line": 144,
                "column": 37
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "params": [
            {
              "name": "segments",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A list of numbers that specifies the distances to\nalternatly draw a line and a gap.",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 2,
                            "column": 34,
                            "offset": 83
                          },
                          "indent": [
                            1
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 34,
                        "offset": 83
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 34,
                    "offset": 83
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "name": "setLineDash",
          "kind": "function",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "setLineDash",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.setLineDash"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the line dash pattern offset or \"phase\" (0 by default).",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 61,
                        "offset": 60
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 61,
                    "offset": 60
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 61,
                "offset": 60
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Sets the line dash pattern offset or \"phase\" (0 by default).",
              "lineNumber": 1
            }
          ],
          "loc": {
            "start": {
              "line": 146,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 150,
                "column": 2
              },
              "end": {
                "line": 150,
                "column": 16
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
            "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
          },
          "name": "lineDashOffset",
          "memberof": "CanvasRendingContext2D",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "CanvasRendingContext2D",
              "kind": "namespace"
            },
            {
              "name": "lineDashOffset",
              "scope": "static"
            }
          ],
          "namespace": "CanvasRendingContext2D.lineDashOffset"
        }
      ]
    },
    "path": [
      {
        "name": "CanvasRendingContext2D",
        "kind": "namespace"
      }
    ],
    "namespace": "CanvasRendingContext2D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 5,
                  "offset": 4
                },
                "indent": []
              }
            },
            {
              "type": "inlineCode",
              "value": "TextMetrics",
              "position": {
                "start": {
                  "line": 1,
                  "column": 5,
                  "offset": 4
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": " interface represents the dimensions of a text in the\ncanvas (display), as created by ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "end": {
                  "line": 2,
                  "column": 33,
                  "offset": 103
                },
                "indent": [
                  1
                ]
              }
            },
            {
              "type": "inlineCode",
              "value": "measureText",
              "position": {
                "start": {
                  "line": 2,
                  "column": 33,
                  "offset": 103
                },
                "end": {
                  "line": 2,
                  "column": 48,
                  "offset": 118
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ".",
              "position": {
                "start": {
                  "line": 2,
                  "column": 48,
                  "offset": 118
                },
                "end": {
                  "line": 2,
                  "column": 49,
                  "offset": 119
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 49,
              "offset": 119
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 49,
          "offset": 119
        }
      }
    },
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "TextMetrics"
      },
      {
        "title": "property",
        "description": "Calculated width of text in pixels.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "width"
      },
      {
        "title": "property",
        "description": "Calculated height of text in pixels.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "height"
      },
      {
        "title": "property",
        "description": "A number giving the distance\n  parallel to the baseline from the alignment point given by the\n  ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n  bounding rectangle of the given text, in pixels.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "actualBoundingBoxLeft"
      },
      {
        "title": "property",
        "description": "A number giving the distance\n  parallel to the baseline from the alignment point given by the\n  ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n  bounding rectangle of the given text, in CSS pixels.",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "actualBoundingBoxRight"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 151,
          "column": 2
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/CanvasRenderingContext2D.js",
      "code": "/**\n * The `TextMetrics` interface represents the dimensions of a text in the\n * canvas (display), as created by ``measureText``.\n * @typedef {Object} TextMetrics\n * @property {Number} width - Calculated width of text in pixels.\n * @property {Number} height - Calculated height of text in pixels.\n * @property {Number} actualBoundingBoxLeft - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the left side of the\n *   bounding rectangle of the given text, in pixels.\n * @property {Number} actualBoundingBoxRight - A number giving the distance\n *   parallel to the baseline from the alignment point given by the\n *   ``CanvasRenderingContext2D.textAlign`` property to the right side of the\n *   bounding rectangle of the given text, in CSS pixels.\n */\n\n\n\n/**\n * @namespace\n * @description\n *  The CanvasRenderingContext2D interface is used for drawing rectangles, text,\n *  images and other objects onto the canvas element. It provides the 2D rendering\n *  context for the drawing on the device's display.\n */\nvar CanvasRendingContext2D = {\n  /**\n  * @description\n  *  Sets all pixels in the rectangle at (x,y) with size (width, height) to\n  *  black, erasing any previously drawn content.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  clearRect: function(x, y, width, height) { },\n\n  /**\n  * @description\n  *  Draws a filled rectangle at (x,y) with size (width, height). \n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  fillRect: function(x,y, width, height) { },\n\n  /**\n  * @description\n  *  Paints a rectangle at (x, y) with size (width, height), using the current\n  *  stroke style.\n  *\n  * @param {Number} x - The x-axis coordinate of the rectangle's starting point\n  * @param {Number} y - The y-axis coordinate of the rectangle's starting point\n  * @param {Number} width - The rectangle's width\n  * @param {Number} height - The rectangle's height\n  */\n  strokeRect: function(x, y, width, height) { },\n\n\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *   the string is wider than the width, the font is adjusted to use a smaller\n  *   font.\n  */\n  fillText: function(text, x, y, maxWidth) { },\n\n  /**\n  * @description\n  *  Draws (fills) text at the given (x,y) position using the current stroke style.\n  *\n  * @param {String} text - The text to draw\n  * @param {Number} x - The x-coordinate of the text's starting point\n  * @param {Number} y - The y-coordinate of the text's starting point\n  * @param {Number} [maxWidth] - The maximum width to draw. If specified, and\n  *  the string is wider than the width, the font is adjusted to use a smaller\n  *  font.\n  *\n  */\n  strokeText: function(text, x, y, maxWidth) { },\n\n  /**\n   * @description\n   *  Returns an object containing information about the text.\n   *\n   * @returns {TextMetrics} Information about the measured text\n   *\n   * @param {String} text - The text to measure\n  */\n  measureText: function(text) { },\n\n  /**\n   * @description\n   *  The width of lines drawn (to the nearest integer) with the context (1.0\n   *  by default)\n   */\n  lineWidth,\n\n  /**\n   * @description\n   *  Determines how the end points of every line are drawn ('butt' by default).\n   *  There are 3 possible values for this property: 'butt', 'round', 'square'.\n   */\n lineCap,\n\n  /**\n   * Determins how two connecting segments with non-zero lengths in a shape\n   * are joined together ('miter' by default). There are three possible values\n   * for this property: 'miter', 'round', 'bevel'\n   */\n  lineJoin,\n\n /**\n  * @description\n  *  Sets the miter limit ratio in pixels (10 by default)\n  */\n  miterLimit,\n\n  /**\n   * @description\n   *  Gets the current line dash pattern\n   *\n   * @returns {Array} - A list of numbers that specifies the distances to\n   *  alternately draw a line and a gap.\n   */\n  getLineDash: function() { },\n\n  /**\n   * @description\n   *  Sets the current line dash pattern.\n   *\n   * @param {Array} segments - A list of numbers that specifies the distances to\n      alternatly draw a line and a gap.\n   */\n  setLineDash: function(segments) { },\n\n  /**\n   * @description\n   *  Sets the line dash pattern offset or \"phase\" (0 by default).\n   */\n  lineDashOffset\n};\n"
    },
    "kind": "typedef",
    "name": "TextMetrics",
    "type": {
      "type": "NameExpression",
      "name": "Object"
    },
    "properties": [
      {
        "name": "width",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Calculated width of text in pixels.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "name": "height",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Calculated height of text in pixels.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "name": "actualBoundingBoxLeft",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "A number giving the distance\n  parallel to the baseline from the alignment point given by the\n  ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 3,
                      "column": 3,
                      "offset": 96
                    },
                    "indent": [
                      1,
                      1
                    ]
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "CanvasRenderingContext2D.textAlign",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 3,
                      "offset": 96
                    },
                    "end": {
                      "line": 3,
                      "column": 41,
                      "offset": 134
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " property to the left side of the\n  bounding rectangle of the given text, in pixels.",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 41,
                      "offset": 134
                    },
                    "end": {
                      "line": 4,
                      "column": 51,
                      "offset": 218
                    },
                    "indent": [
                      1
                    ]
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 4,
                  "column": 51,
                  "offset": 218
                },
                "indent": [
                  1,
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "column": 51,
              "offset": 218
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "name": "actualBoundingBoxRight",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "A number giving the distance\n  parallel to the baseline from the alignment point given by the\n  ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 3,
                      "column": 3,
                      "offset": 96
                    },
                    "indent": [
                      1,
                      1
                    ]
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "CanvasRenderingContext2D.textAlign",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 3,
                      "offset": 96
                    },
                    "end": {
                      "line": 3,
                      "column": 41,
                      "offset": 134
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " property to the right side of the\n  bounding rectangle of the given text, in CSS pixels.",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 41,
                      "offset": 134
                    },
                    "end": {
                      "line": 4,
                      "column": 55,
                      "offset": 223
                    },
                    "indent": [
                      1
                    ]
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 4,
                  "column": 55,
                  "offset": 223
                },
                "indent": [
                  1,
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "column": 55,
              "offset": 223
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "TextMetrics",
        "kind": "typedef"
      }
    ],
    "namespace": "TextMetrics"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Provides an interface for the Console.log method",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 49,
                  "offset": 48
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 49,
              "offset": 48
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 49,
          "offset": 48
        }
      }
    },
    "tags": [
      {
        "title": "namespace",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "name": "Console"
      },
      {
        "title": "description",
        "description": "Provides an interface for the Console.log method",
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 27
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/Console.js",
      "code": "/**\n * @namespace Console\n * @description\n *  Provides an interface for the Console.log method\n */\nvar Console = new Object();\n\n/**\n * @description\n *  Logs a message\n * @param {String} message - the message to log\n */\nConsole.log = function(message) { };\n"
    },
    "kind": "namespace",
    "name": "Console",
    "members": {
      "instance": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Logs a message",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 15,
                        "offset": 14
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 15,
                    "offset": 14
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 15,
                "offset": 14
              }
            }
          },
          "tags": [
            {
              "title": "description",
              "description": "Logs a message",
              "lineNumber": 1
            },
            {
              "title": "param",
              "description": "the message to log",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "String"
              },
              "name": "message"
            }
          ],
          "loc": {
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 13,
                "column": 0
              },
              "end": {
                "line": 13,
                "column": 36
              }
            },
            "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/Console.js",
            "code": "/**\n * @namespace Console\n * @description\n *  Provides an interface for the Console.log method\n */\nvar Console = new Object();\n\n/**\n * @description\n *  Logs a message\n * @param {String} message - the message to log\n */\nConsole.log = function(message) { };\n"
          },
          "params": [
            {
              "name": "message",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the message to log",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 19,
                            "offset": 18
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 19,
                        "offset": 18
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 19,
                    "offset": 18
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            }
          ],
          "name": "log",
          "kind": "function",
          "memberof": "Console",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Console",
              "kind": "namespace"
            },
            {
              "name": "log",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Console.log"
        }
      ]
    },
    "path": [
      {
        "name": "Console",
        "kind": "namespace"
      }
    ],
    "namespace": "Console"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Calls a function after a specified delay",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 41,
                  "offset": 40
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 41,
              "offset": 40
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 41,
          "offset": 40
        }
      }
    },
    "tags": [
      {
        "title": "description",
        "description": "Calls a function after a specified delay",
        "lineNumber": 1
      },
      {
        "title": "returns",
        "description": "timeoutId - The ID of the timeout",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "description": "The function to execute",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "name": "fct"
      },
      {
        "title": "param",
        "description": "The delay (in ms)",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "delay"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 38
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/rocky.js",
      "code": "/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n *  Calls a function after a specified delay\n * @returns {Number} timeoutId - The ID of the timeout\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetTimeout = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the delay set by ``setTimeout``\n * @param {Number} timeoutId - The ID of the timeout you wish to clear.\n */\nclearTimeout = function(timeoutId) { };\n\n/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n * Repeatedly calls a function, with a fixed time delay between each call\n * @returns {Number} intervalId - The ID of the interval\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetInterval = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the interval set by ``setInterval``\n * @params {Number} intervalId - The ID of the interval you wish to clear.\n */\nclearInterval = function(intervalId) { };\n\n"
    },
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "timeoutId - The ID of the timeout",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "params": [
      {
        "name": "fct",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The function to execute",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 24,
                  "offset": 23
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 24,
              "offset": 23
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "name": "delay",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The delay (in ms)",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "setTimeout",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setTimeout",
        "kind": "function"
      }
    ],
    "namespace": "setTimeout"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Clears the delay set by ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            },
            {
              "type": "inlineCode",
              "value": "setTimeout",
              "position": {
                "start": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "end": {
                  "line": 1,
                  "column": 39,
                  "offset": 38
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 39,
              "offset": 38
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 39,
          "offset": 38
        }
      }
    },
    "tags": [
      {
        "title": "description",
        "description": "Clears the delay set by ``setTimeout``",
        "lineNumber": 1
      },
      {
        "title": "param",
        "description": "The ID of the timeout you wish to clear.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "timeoutId"
      }
    ],
    "loc": {
      "start": {
        "line": 12,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 39
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/rocky.js",
      "code": "/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n *  Calls a function after a specified delay\n * @returns {Number} timeoutId - The ID of the timeout\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetTimeout = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the delay set by ``setTimeout``\n * @param {Number} timeoutId - The ID of the timeout you wish to clear.\n */\nclearTimeout = function(timeoutId) { };\n\n/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n * Repeatedly calls a function, with a fixed time delay between each call\n * @returns {Number} intervalId - The ID of the interval\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetInterval = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the interval set by ``setInterval``\n * @params {Number} intervalId - The ID of the interval you wish to clear.\n */\nclearInterval = function(intervalId) { };\n\n"
    },
    "params": [
      {
        "name": "timeoutId",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The ID of the timeout you wish to clear.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 41,
                      "offset": 40
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 41,
                  "offset": 40
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 41,
              "offset": 40
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "clearTimeout",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "clearTimeout",
        "kind": "function"
      }
    ],
    "namespace": "clearTimeout"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Repeatedly calls a function, with a fixed time delay between each call",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 71,
                  "offset": 70
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 71,
              "offset": 70
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 71,
          "offset": 70
        }
      }
    },
    "tags": [
      {
        "title": "description",
        "description": "Repeatedly calls a function, with a fixed time delay between each call",
        "lineNumber": 1
      },
      {
        "title": "returns",
        "description": "intervalId - The ID of the interval",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "description": "The function to execute",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "name": "fct"
      },
      {
        "title": "param",
        "description": "The delay (in ms)",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "delay"
      }
    ],
    "loc": {
      "start": {
        "line": 21,
        "column": 0
      },
      "end": {
        "line": 27,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 28,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 39
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/rocky.js",
      "code": "/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n *  Calls a function after a specified delay\n * @returns {Number} timeoutId - The ID of the timeout\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetTimeout = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the delay set by ``setTimeout``\n * @param {Number} timeoutId - The ID of the timeout you wish to clear.\n */\nclearTimeout = function(timeoutId) { };\n\n/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n * Repeatedly calls a function, with a fixed time delay between each call\n * @returns {Number} intervalId - The ID of the interval\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetInterval = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the interval set by ``setInterval``\n * @params {Number} intervalId - The ID of the interval you wish to clear.\n */\nclearInterval = function(intervalId) { };\n\n"
    },
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "intervalId - The ID of the interval",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "params": [
      {
        "name": "fct",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The function to execute",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 24,
                  "offset": 23
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 24,
              "offset": 23
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "name": "delay",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The delay (in ms)",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "setInterval",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setInterval",
        "kind": "function"
      }
    ],
    "namespace": "setInterval"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Clears the interval set by ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            },
            {
              "type": "inlineCode",
              "value": "setInterval",
              "position": {
                "start": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 43,
          "offset": 42
        }
      }
    },
    "tags": [
      {
        "title": "description",
        "description": "Clears the interval set by ``setInterval``",
        "lineNumber": 1
      },
      {
        "title": "params",
        "description": "{Number} intervalId - The ID of the interval you wish to clear.",
        "lineNumber": 3
      }
    ],
    "loc": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 34,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 41
        }
      },
      "file": "/Users/devsite/src/pebble/developer.rebble.io/rocky-stubs/rocky.js",
      "code": "/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n *  Calls a function after a specified delay\n * @returns {Number} timeoutId - The ID of the timeout\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetTimeout = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the delay set by ``setTimeout``\n * @param {Number} timeoutId - The ID of the timeout you wish to clear.\n */\nclearTimeout = function(timeoutId) { };\n\n/* Shim for Rocky.js docs. Contains top level APIs + the Rocky object */\n\n/**\n * @description\n * Repeatedly calls a function, with a fixed time delay between each call\n * @returns {Number} intervalId - The ID of the interval\n * @param {Function} fct - The function to execute\n * @param {Number} delay - The delay (in ms)\n */\nsetInterval = function(fct, delay) { };\n\n/**\n * @description\n *  Clears the interval set by ``setInterval``\n * @params {Number} intervalId - The ID of the interval you wish to clear.\n */\nclearInterval = function(intervalId) { };\n\n"
    },
    "name": "clearInterval",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "intervalId",
        "lineNumber": 35
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "clearInterval",
        "kind": "function"
      }
    ],
    "namespace": "clearInterval"
  }
]